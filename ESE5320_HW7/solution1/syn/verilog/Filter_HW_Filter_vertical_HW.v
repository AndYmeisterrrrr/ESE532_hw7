// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module Filter_HW_Filter_vertical_HW (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        TempStream_dout,
        TempStream_empty_n,
        TempStream_read,
        outStream_din,
        outStream_full_n,
        outStream_write
);

parameter    ap_ST_fsm_state1 = 5'd1;
parameter    ap_ST_fsm_pp0_stage0 = 5'd2;
parameter    ap_ST_fsm_state6 = 5'd4;
parameter    ap_ST_fsm_pp1_stage0 = 5'd8;
parameter    ap_ST_fsm_state28 = 5'd16;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [7:0] TempStream_dout;
input   TempStream_empty_n;
output   TempStream_read;
output  [7:0] outStream_din;
input   outStream_full_n;
output   outStream_write;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg TempStream_read;
reg outStream_write;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [4:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    TempStream_blk_n;
reg    ap_enable_reg_pp0_iter3;
wire    ap_block_pp0_stage0;
reg   [0:0] icmp_ln68_reg_794;
reg   [0:0] icmp_ln68_reg_794_pp0_iter2_reg;
reg    ap_enable_reg_pp1_iter15;
wire    ap_block_pp1_stage0;
reg   [0:0] icmp_ln74_reg_833;
reg   [0:0] icmp_ln74_reg_833_pp1_iter14_reg;
reg    outStream_blk_n;
reg    ap_enable_reg_pp1_iter20;
reg   [0:0] icmp_ln74_reg_833_pp1_iter19_reg;
reg   [11:0] indvar_flatten_reg_203;
reg   [2:0] Y_reg_214;
reg   [8:0] X_reg_225;
reg   [16:0] indvar_flatten7_reg_236;
reg   [8:0] Y_1_reg_247;
wire    ap_CS_fsm_pp1_stage0;
wire    ap_block_state7_pp1_stage0_iter0;
wire    ap_block_state8_pp1_stage0_iter1;
wire    ap_block_state9_pp1_stage0_iter2;
wire    ap_block_state10_pp1_stage0_iter3;
wire    ap_block_state11_pp1_stage0_iter4;
wire    ap_block_state12_pp1_stage0_iter5;
wire    ap_block_state13_pp1_stage0_iter6;
wire    ap_block_state14_pp1_stage0_iter7;
wire    ap_block_state15_pp1_stage0_iter8;
wire    ap_block_state16_pp1_stage0_iter9;
wire    ap_block_state17_pp1_stage0_iter10;
wire    ap_block_state18_pp1_stage0_iter11;
wire    ap_block_state19_pp1_stage0_iter12;
wire    ap_block_state20_pp1_stage0_iter13;
wire    ap_block_state21_pp1_stage0_iter14;
reg    ap_block_state22_pp1_stage0_iter15;
wire    ap_block_state23_pp1_stage0_iter16;
wire    ap_block_state24_pp1_stage0_iter17;
wire    ap_block_state25_pp1_stage0_iter18;
wire    ap_block_state26_pp1_stage0_iter19;
reg    ap_block_state27_pp1_stage0_iter20;
reg    ap_block_pp1_stage0_11001;
reg   [8:0] X_1_reg_259;
wire   [11:0] add_ln68_fu_270_p2;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state3_pp0_stage0_iter1;
wire    ap_block_state4_pp0_stage0_iter2;
reg    ap_block_state5_pp0_stage0_iter3;
reg    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln68_fu_276_p2;
reg   [0:0] icmp_ln68_reg_794_pp0_iter1_reg;
wire   [8:0] select_ln68_fu_288_p3;
reg   [8:0] select_ln68_reg_798;
reg   [8:0] select_ln68_reg_798_pp0_iter1_reg;
wire   [2:0] select_ln68_1_fu_302_p3;
reg   [2:0] select_ln68_1_reg_803;
wire   [8:0] add_ln69_fu_314_p2;
wire   [16:0] add_ln74_fu_327_p2;
reg    ap_enable_reg_pp1_iter0;
wire   [8:0] Y_2_fu_333_p2;
reg   [8:0] Y_2_reg_828;
wire   [0:0] icmp_ln74_fu_339_p2;
reg   [0:0] icmp_ln74_reg_833_pp1_iter1_reg;
reg   [0:0] icmp_ln74_reg_833_pp1_iter2_reg;
reg   [0:0] icmp_ln74_reg_833_pp1_iter3_reg;
reg   [0:0] icmp_ln74_reg_833_pp1_iter4_reg;
reg   [0:0] icmp_ln74_reg_833_pp1_iter5_reg;
reg   [0:0] icmp_ln74_reg_833_pp1_iter6_reg;
reg   [0:0] icmp_ln74_reg_833_pp1_iter7_reg;
reg   [0:0] icmp_ln74_reg_833_pp1_iter8_reg;
reg   [0:0] icmp_ln74_reg_833_pp1_iter9_reg;
reg   [0:0] icmp_ln74_reg_833_pp1_iter10_reg;
reg   [0:0] icmp_ln74_reg_833_pp1_iter11_reg;
reg   [0:0] icmp_ln74_reg_833_pp1_iter12_reg;
reg   [0:0] icmp_ln74_reg_833_pp1_iter13_reg;
reg   [0:0] icmp_ln74_reg_833_pp1_iter15_reg;
reg   [0:0] icmp_ln74_reg_833_pp1_iter16_reg;
reg   [0:0] icmp_ln74_reg_833_pp1_iter17_reg;
reg   [0:0] icmp_ln74_reg_833_pp1_iter18_reg;
wire   [0:0] icmp_ln76_fu_345_p2;
reg   [0:0] icmp_ln76_reg_837;
reg   [0:0] icmp_ln76_reg_837_pp1_iter1_reg;
reg   [0:0] icmp_ln76_reg_837_pp1_iter2_reg;
reg   [0:0] icmp_ln76_reg_837_pp1_iter3_reg;
reg   [0:0] icmp_ln76_reg_837_pp1_iter4_reg;
reg   [0:0] icmp_ln76_reg_837_pp1_iter5_reg;
reg   [0:0] icmp_ln76_reg_837_pp1_iter6_reg;
reg   [0:0] icmp_ln76_reg_837_pp1_iter7_reg;
reg   [0:0] icmp_ln76_reg_837_pp1_iter8_reg;
reg   [0:0] icmp_ln76_reg_837_pp1_iter9_reg;
reg   [0:0] icmp_ln76_reg_837_pp1_iter10_reg;
reg   [0:0] icmp_ln76_reg_837_pp1_iter11_reg;
reg   [0:0] icmp_ln76_reg_837_pp1_iter12_reg;
reg   [0:0] icmp_ln76_reg_837_pp1_iter13_reg;
wire   [8:0] select_ln65_fu_351_p3;
reg   [8:0] select_ln65_reg_847;
reg   [8:0] select_ln65_reg_847_pp1_iter1_reg;
reg   [8:0] select_ln65_reg_847_pp1_iter2_reg;
reg   [8:0] select_ln65_reg_847_pp1_iter3_reg;
reg   [8:0] select_ln65_reg_847_pp1_iter4_reg;
reg   [8:0] select_ln65_reg_847_pp1_iter5_reg;
reg   [8:0] select_ln65_reg_847_pp1_iter6_reg;
reg   [8:0] select_ln65_reg_847_pp1_iter7_reg;
reg   [8:0] select_ln65_reg_847_pp1_iter8_reg;
reg   [8:0] select_ln65_reg_847_pp1_iter9_reg;
reg   [8:0] select_ln65_reg_847_pp1_iter10_reg;
reg   [8:0] select_ln65_reg_847_pp1_iter11_reg;
reg   [8:0] select_ln65_reg_847_pp1_iter12_reg;
reg   [8:0] select_ln65_reg_847_pp1_iter13_reg;
wire   [8:0] select_ln74_fu_379_p3;
reg   [8:0] select_ln74_reg_857;
wire   [8:0] add_ln76_fu_387_p2;
wire   [8:0] grp_fu_393_p2;
reg   [8:0] rem15_urem_i_reg_897;
wire   [8:0] grp_fu_399_p2;
reg   [8:0] rem15_1_urem_i_reg_902;
wire   [8:0] grp_fu_410_p2;
reg   [8:0] rem15_1_urem_i_mid1_reg_907;
wire   [11:0] X_1_cast_i_fu_553_p1;
reg   [11:0] X_1_cast_i_reg_932;
wire   [11:0] add_ln84_fu_556_p2;
reg   [11:0] add_ln84_reg_941;
reg   [11:0] add_ln84_reg_941_pp1_iter15_reg;
wire   [11:0] add_ln84_1_fu_562_p2;
reg   [11:0] add_ln84_1_reg_946;
reg   [11:0] add_ln84_1_reg_946_pp1_iter15_reg;
reg   [7:0] tmp_1_reg_951;
reg   [7:0] tmp_1_reg_951_pp1_iter16_reg;
wire   [8:0] tmp_i_fu_616_p2;
reg   [8:0] tmp_i_reg_991;
reg   [8:0] tmp_i_reg_991_pp1_iter18_reg;
reg   [8:0] tmp_i_reg_991_pp1_iter19_reg;
wire   [8:0] tmp2_i_fu_622_p2;
reg   [8:0] tmp2_i_reg_997;
reg   [8:0] tmp2_i_reg_997_pp1_iter18_reg;
reg   [8:0] tmp2_i_reg_997_pp1_iter19_reg;
wire   [8:0] tmp41_i_fu_635_p2;
reg   [8:0] tmp41_i_reg_1003;
reg   [8:0] tmp41_i_reg_1003_pp1_iter18_reg;
reg    ap_block_state1;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
wire    ap_CS_fsm_state6;
reg    ap_block_pp1_stage0_subdone;
reg    ap_condition_pp1_flush_enable;
reg    ap_enable_reg_pp1_iter1;
reg    ap_enable_reg_pp1_iter2;
reg    ap_enable_reg_pp1_iter3;
reg    ap_enable_reg_pp1_iter4;
reg    ap_enable_reg_pp1_iter5;
reg    ap_enable_reg_pp1_iter6;
reg    ap_enable_reg_pp1_iter7;
reg    ap_enable_reg_pp1_iter8;
reg    ap_enable_reg_pp1_iter9;
reg    ap_enable_reg_pp1_iter10;
reg    ap_enable_reg_pp1_iter11;
reg    ap_enable_reg_pp1_iter12;
reg    ap_enable_reg_pp1_iter13;
reg    ap_enable_reg_pp1_iter14;
reg    ap_condition_pp1_exit_iter14_state21;
reg    ap_enable_reg_pp1_iter16;
reg    ap_enable_reg_pp1_iter17;
reg    ap_enable_reg_pp1_iter18;
reg    ap_enable_reg_pp1_iter19;
reg   [11:0] Input_tmp_address0;
reg    Input_tmp_ce0;
reg    Input_tmp_we0;
wire   [11:0] Input_tmp_address1;
reg    Input_tmp_ce1;
wire   [7:0] Input_tmp_q1;
wire   [11:0] Input_tmp_address2;
reg    Input_tmp_ce2;
wire   [7:0] Input_tmp_q2;
wire   [11:0] Input_tmp_address3;
reg    Input_tmp_ce3;
wire   [7:0] Input_tmp_q3;
wire   [11:0] Input_tmp_address4;
reg    Input_tmp_ce4;
wire   [7:0] Input_tmp_q4;
wire   [11:0] Input_tmp_address5;
reg    Input_tmp_ce5;
wire   [7:0] Input_tmp_q5;
wire   [11:0] Input_tmp_address6;
reg    Input_tmp_ce6;
wire   [7:0] Input_tmp_q6;
reg   [2:0] ap_phi_mux_Y_phi_fu_218_p4;
reg   [8:0] ap_phi_mux_Y_1_phi_fu_251_p4;
wire   [63:0] zext_ln70_fu_323_p1;
wire   [63:0] zext_ln78_fu_568_p1;
wire   [63:0] zext_ln84_1_fu_572_p1;
wire   [63:0] zext_ln84_2_fu_576_p1;
wire   [63:0] zext_ln84_4_fu_580_p1;
wire   [63:0] zext_ln84_6_fu_584_p1;
wire   [63:0] zext_ln84_8_fu_588_p1;
wire   [63:0] zext_ln84_9_fu_592_p1;
reg    ap_block_pp1_stage0_01001;
wire   [0:0] icmp_ln69_fu_282_p2;
wire   [2:0] add_ln68_1_fu_296_p2;
wire   [11:0] grp_fu_730_p3;
wire   [8:0] select_ln65_1_fu_359_p3;
wire   [8:0] grp_fu_373_p0;
wire   [3:0] grp_fu_373_p1;
wire   [3:0] grp_fu_393_p1;
wire   [3:0] grp_fu_399_p1;
wire   [8:0] grp_fu_410_p0;
wire   [3:0] grp_fu_410_p1;
wire   [8:0] select_ln65_4_fu_416_p3;
wire   [8:0] grp_fu_429_p0;
wire   [3:0] grp_fu_429_p1;
wire   [8:0] select_ln65_5_fu_435_p3;
wire   [8:0] grp_fu_448_p0;
wire   [3:0] grp_fu_448_p1;
wire   [8:0] select_ln65_6_fu_454_p3;
wire   [8:0] grp_fu_467_p0;
wire   [3:0] grp_fu_467_p1;
wire   [8:0] select_ln65_7_fu_473_p3;
wire   [8:0] grp_fu_486_p0;
wire   [3:0] grp_fu_486_p1;
wire   [8:0] grp_fu_373_p2;
wire   [8:0] grp_fu_429_p2;
wire   [8:0] grp_fu_448_p2;
wire   [8:0] grp_fu_467_p2;
wire   [8:0] grp_fu_486_p2;
wire   [3:0] mul_ln84_fu_515_p0;
wire   [9:0] mul_ln84_fu_515_p1;
wire   [3:0] mul16_1_i_fu_524_p0;
wire   [9:0] mul16_1_i_fu_524_p1;
wire   [11:0] mul16_1_i_fu_524_p2;
wire   [11:0] mul_ln84_fu_515_p2;
wire   [3:0] mul16_1_i_mid1_fu_540_p0;
wire   [9:0] mul16_1_i_mid1_fu_540_p1;
wire   [11:0] mul16_1_i_mid1_fu_540_p2;
wire   [11:0] select_ln65_2_fu_530_p3;
wire   [11:0] select_ln65_3_fu_546_p3;
wire   [11:0] grp_fu_739_p3;
wire   [11:0] grp_fu_748_p3;
wire   [11:0] grp_fu_756_p3;
wire   [11:0] grp_fu_764_p3;
wire   [11:0] grp_fu_772_p3;
wire   [8:0] zext_ln79_fu_608_p1;
wire   [8:0] zext_ln84_5_fu_600_p1;
wire   [8:0] zext_ln79_1_fu_612_p1;
wire   [8:0] zext_ln84_3_fu_596_p1;
wire   [8:0] Input_tmp_load_cast_i_fu_631_p1;
wire   [8:0] tmp_2_cast_i_fu_628_p1;
wire   [9:0] tmp5_i_fu_641_p3;
wire   [14:0] p_shl3_i_fu_652_p3;
wire   [9:0] p_shl4_i_fu_663_p3;
wire   [15:0] p_shl3_cast_i_fu_659_p1;
wire   [15:0] p_shl4_cast_i_fu_670_p1;
wire   [12:0] p_shl_i_fu_683_p3;
wire   [13:0] p_shl_cast_i_fu_690_p1;
wire   [13:0] tmp2_cast6_i_fu_680_p1;
wire   [13:0] tmp3_i_fu_694_p2;
wire   [14:0] grp_fu_780_p3;
wire   [15:0] zext_ln84_11_fu_704_p1;
wire  signed [15:0] tmp3_cast_i_fu_700_p1;
wire   [15:0] add_ln84_7_fu_707_p2;
wire   [15:0] tmp1_i_fu_674_p2;
wire   [15:0] Sum_fu_713_p2;
wire   [2:0] grp_fu_730_p0;
wire   [9:0] grp_fu_730_p1;
wire   [8:0] grp_fu_730_p2;
wire   [3:0] grp_fu_739_p0;
wire   [9:0] grp_fu_739_p1;
wire   [8:0] grp_fu_739_p2;
wire   [3:0] grp_fu_748_p0;
wire   [9:0] grp_fu_748_p1;
wire   [8:0] grp_fu_748_p2;
wire   [3:0] grp_fu_756_p0;
wire   [9:0] grp_fu_756_p1;
wire   [8:0] grp_fu_756_p2;
wire   [3:0] grp_fu_764_p0;
wire   [9:0] grp_fu_764_p1;
wire   [8:0] grp_fu_764_p2;
wire   [3:0] grp_fu_772_p0;
wire   [9:0] grp_fu_772_p1;
wire   [8:0] grp_fu_772_p2;
wire   [7:0] grp_fu_780_p0;
wire   [7:0] grp_fu_780_p1;
wire   [9:0] grp_fu_780_p2;
reg    grp_fu_373_ce;
reg    grp_fu_393_ce;
reg    grp_fu_399_ce;
reg    grp_fu_410_ce;
reg    grp_fu_429_ce;
reg    grp_fu_448_ce;
reg    grp_fu_467_ce;
reg    grp_fu_486_ce;
reg    grp_fu_730_ce;
reg    grp_fu_739_ce;
reg    grp_fu_748_ce;
reg    grp_fu_756_ce;
reg    grp_fu_764_ce;
reg    grp_fu_772_ce;
reg    grp_fu_780_ce;
wire    ap_CS_fsm_state28;
reg   [4:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_idle_pp1;
wire    ap_enable_pp1;
wire   [11:0] grp_fu_730_p00;
wire   [11:0] grp_fu_730_p20;
wire   [11:0] grp_fu_739_p00;
wire   [11:0] grp_fu_748_p00;
wire   [11:0] grp_fu_756_p00;
wire   [11:0] grp_fu_764_p00;
wire   [11:0] grp_fu_772_p00;
wire   [14:0] grp_fu_780_p00;
wire   [14:0] grp_fu_780_p20;
wire   [11:0] mul16_1_i_fu_524_p00;
wire   [11:0] mul16_1_i_mid1_fu_540_p00;
wire   [11:0] mul_ln84_fu_515_p00;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 5'd1;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp1_iter15 = 1'b0;
#0 ap_enable_reg_pp1_iter20 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp1_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp1_iter1 = 1'b0;
#0 ap_enable_reg_pp1_iter2 = 1'b0;
#0 ap_enable_reg_pp1_iter3 = 1'b0;
#0 ap_enable_reg_pp1_iter4 = 1'b0;
#0 ap_enable_reg_pp1_iter5 = 1'b0;
#0 ap_enable_reg_pp1_iter6 = 1'b0;
#0 ap_enable_reg_pp1_iter7 = 1'b0;
#0 ap_enable_reg_pp1_iter8 = 1'b0;
#0 ap_enable_reg_pp1_iter9 = 1'b0;
#0 ap_enable_reg_pp1_iter10 = 1'b0;
#0 ap_enable_reg_pp1_iter11 = 1'b0;
#0 ap_enable_reg_pp1_iter12 = 1'b0;
#0 ap_enable_reg_pp1_iter13 = 1'b0;
#0 ap_enable_reg_pp1_iter14 = 1'b0;
#0 ap_enable_reg_pp1_iter16 = 1'b0;
#0 ap_enable_reg_pp1_iter17 = 1'b0;
#0 ap_enable_reg_pp1_iter18 = 1'b0;
#0 ap_enable_reg_pp1_iter19 = 1'b0;
end

Filter_HW_Filter_vertical_HW_Input_tmp #(
    .DataWidth( 8 ),
    .AddressRange( 3318 ),
    .AddressWidth( 12 ))
Input_tmp_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(Input_tmp_address0),
    .ce0(Input_tmp_ce0),
    .we0(Input_tmp_we0),
    .d0(TempStream_dout),
    .address1(Input_tmp_address1),
    .ce1(Input_tmp_ce1),
    .q1(Input_tmp_q1),
    .address2(Input_tmp_address2),
    .ce2(Input_tmp_ce2),
    .q2(Input_tmp_q2),
    .address3(Input_tmp_address3),
    .ce3(Input_tmp_ce3),
    .q3(Input_tmp_q3),
    .address4(Input_tmp_address4),
    .ce4(Input_tmp_ce4),
    .q4(Input_tmp_q4),
    .address5(Input_tmp_address5),
    .ce5(Input_tmp_ce5),
    .q5(Input_tmp_q5),
    .address6(Input_tmp_address6),
    .ce6(Input_tmp_ce6),
    .q6(Input_tmp_q6)
);

Filter_HW_urem_9ns_4ns_9_13_1 #(
    .ID( 1 ),
    .NUM_STAGE( 13 ),
    .din0_WIDTH( 9 ),
    .din1_WIDTH( 4 ),
    .dout_WIDTH( 9 ))
urem_9ns_4ns_9_13_1_U14(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_373_p0),
    .din1(grp_fu_373_p1),
    .ce(grp_fu_373_ce),
    .dout(grp_fu_373_p2)
);

Filter_HW_urem_9ns_4ns_9_13_1 #(
    .ID( 1 ),
    .NUM_STAGE( 13 ),
    .din0_WIDTH( 9 ),
    .din1_WIDTH( 4 ),
    .dout_WIDTH( 9 ))
urem_9ns_4ns_9_13_1_U15(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(Y_1_reg_247),
    .din1(grp_fu_393_p1),
    .ce(grp_fu_393_ce),
    .dout(grp_fu_393_p2)
);

Filter_HW_urem_9ns_4ns_9_13_1 #(
    .ID( 1 ),
    .NUM_STAGE( 13 ),
    .din0_WIDTH( 9 ),
    .din1_WIDTH( 4 ),
    .dout_WIDTH( 9 ))
urem_9ns_4ns_9_13_1_U16(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(Y_2_reg_828),
    .din1(grp_fu_399_p1),
    .ce(grp_fu_399_ce),
    .dout(grp_fu_399_p2)
);

Filter_HW_urem_9ns_4ns_9_13_1 #(
    .ID( 1 ),
    .NUM_STAGE( 13 ),
    .din0_WIDTH( 9 ),
    .din1_WIDTH( 4 ),
    .dout_WIDTH( 9 ))
urem_9ns_4ns_9_13_1_U17(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_410_p0),
    .din1(grp_fu_410_p1),
    .ce(grp_fu_410_ce),
    .dout(grp_fu_410_p2)
);

Filter_HW_urem_9ns_4ns_9_13_1 #(
    .ID( 1 ),
    .NUM_STAGE( 13 ),
    .din0_WIDTH( 9 ),
    .din1_WIDTH( 4 ),
    .dout_WIDTH( 9 ))
urem_9ns_4ns_9_13_1_U18(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_429_p0),
    .din1(grp_fu_429_p1),
    .ce(grp_fu_429_ce),
    .dout(grp_fu_429_p2)
);

Filter_HW_urem_9ns_4ns_9_13_1 #(
    .ID( 1 ),
    .NUM_STAGE( 13 ),
    .din0_WIDTH( 9 ),
    .din1_WIDTH( 4 ),
    .dout_WIDTH( 9 ))
urem_9ns_4ns_9_13_1_U19(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_448_p0),
    .din1(grp_fu_448_p1),
    .ce(grp_fu_448_ce),
    .dout(grp_fu_448_p2)
);

Filter_HW_urem_9ns_4ns_9_13_1 #(
    .ID( 1 ),
    .NUM_STAGE( 13 ),
    .din0_WIDTH( 9 ),
    .din1_WIDTH( 4 ),
    .dout_WIDTH( 9 ))
urem_9ns_4ns_9_13_1_U20(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_467_p0),
    .din1(grp_fu_467_p1),
    .ce(grp_fu_467_ce),
    .dout(grp_fu_467_p2)
);

Filter_HW_urem_9ns_4ns_9_13_1 #(
    .ID( 1 ),
    .NUM_STAGE( 13 ),
    .din0_WIDTH( 9 ),
    .din1_WIDTH( 4 ),
    .dout_WIDTH( 9 ))
urem_9ns_4ns_9_13_1_U21(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_486_p0),
    .din1(grp_fu_486_p1),
    .ce(grp_fu_486_ce),
    .dout(grp_fu_486_p2)
);

Filter_HW_mul_4ns_10ns_12_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 4 ),
    .din1_WIDTH( 10 ),
    .dout_WIDTH( 12 ))
mul_4ns_10ns_12_1_1_U22(
    .din0(mul_ln84_fu_515_p0),
    .din1(mul_ln84_fu_515_p1),
    .dout(mul_ln84_fu_515_p2)
);

Filter_HW_mul_4ns_10ns_12_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 4 ),
    .din1_WIDTH( 10 ),
    .dout_WIDTH( 12 ))
mul_4ns_10ns_12_1_1_U23(
    .din0(mul16_1_i_fu_524_p0),
    .din1(mul16_1_i_fu_524_p1),
    .dout(mul16_1_i_fu_524_p2)
);

Filter_HW_mul_4ns_10ns_12_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 4 ),
    .din1_WIDTH( 10 ),
    .dout_WIDTH( 12 ))
mul_4ns_10ns_12_1_1_U24(
    .din0(mul16_1_i_mid1_fu_540_p0),
    .din1(mul16_1_i_mid1_fu_540_p1),
    .dout(mul16_1_i_mid1_fu_540_p2)
);

Filter_HW_mac_muladd_3ns_10ns_9ns_12_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 10 ),
    .din2_WIDTH( 9 ),
    .dout_WIDTH( 12 ))
mac_muladd_3ns_10ns_9ns_12_4_1_U25(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_730_p0),
    .din1(grp_fu_730_p1),
    .din2(grp_fu_730_p2),
    .ce(grp_fu_730_ce),
    .dout(grp_fu_730_p3)
);

Filter_HW_mac_muladd_4ns_10ns_9ns_12_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 4 ),
    .din1_WIDTH( 10 ),
    .din2_WIDTH( 9 ),
    .dout_WIDTH( 12 ))
mac_muladd_4ns_10ns_9ns_12_4_1_U26(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_739_p0),
    .din1(grp_fu_739_p1),
    .din2(grp_fu_739_p2),
    .ce(grp_fu_739_ce),
    .dout(grp_fu_739_p3)
);

Filter_HW_mac_muladd_4ns_10ns_9ns_12_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 4 ),
    .din1_WIDTH( 10 ),
    .din2_WIDTH( 9 ),
    .dout_WIDTH( 12 ))
mac_muladd_4ns_10ns_9ns_12_4_1_U27(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_748_p0),
    .din1(grp_fu_748_p1),
    .din2(grp_fu_748_p2),
    .ce(grp_fu_748_ce),
    .dout(grp_fu_748_p3)
);

Filter_HW_mac_muladd_4ns_10ns_9ns_12_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 4 ),
    .din1_WIDTH( 10 ),
    .din2_WIDTH( 9 ),
    .dout_WIDTH( 12 ))
mac_muladd_4ns_10ns_9ns_12_4_1_U28(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_756_p0),
    .din1(grp_fu_756_p1),
    .din2(grp_fu_756_p2),
    .ce(grp_fu_756_ce),
    .dout(grp_fu_756_p3)
);

Filter_HW_mac_muladd_4ns_10ns_9ns_12_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 4 ),
    .din1_WIDTH( 10 ),
    .din2_WIDTH( 9 ),
    .dout_WIDTH( 12 ))
mac_muladd_4ns_10ns_9ns_12_4_1_U29(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_764_p0),
    .din1(grp_fu_764_p1),
    .din2(grp_fu_764_p2),
    .ce(grp_fu_764_ce),
    .dout(grp_fu_764_p3)
);

Filter_HW_mac_muladd_4ns_10ns_9ns_12_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 4 ),
    .din1_WIDTH( 10 ),
    .din2_WIDTH( 9 ),
    .dout_WIDTH( 12 ))
mac_muladd_4ns_10ns_9ns_12_4_1_U30(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_772_p0),
    .din1(grp_fu_772_p1),
    .din2(grp_fu_772_p2),
    .ce(grp_fu_772_ce),
    .dout(grp_fu_772_p3)
);

Filter_HW_mac_muladd_8ns_8ns_10ns_15_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 10 ),
    .dout_WIDTH( 15 ))
mac_muladd_8ns_8ns_10ns_15_4_1_U31(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_780_p0),
    .din1(grp_fu_780_p1),
    .din2(grp_fu_780_p2),
    .ce(grp_fu_780_ce),
    .dout(grp_fu_780_p3)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state28)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state2) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state2)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state2);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end else if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter3 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter0 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_pp1_flush_enable)) begin
            ap_enable_reg_pp1_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state6)) begin
            ap_enable_reg_pp1_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter10 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter10 <= ap_enable_reg_pp1_iter9;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter11 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter11 <= ap_enable_reg_pp1_iter10;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter12 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter12 <= ap_enable_reg_pp1_iter11;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter13 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter13 <= ap_enable_reg_pp1_iter12;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter14 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter14 <= ap_enable_reg_pp1_iter13;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter15 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp1_exit_iter14_state21)) begin
                ap_enable_reg_pp1_iter15 <= ap_enable_reg_pp1_iter13;
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp1_iter15 <= ap_enable_reg_pp1_iter14;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter16 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter16 <= ap_enable_reg_pp1_iter15;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter17 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter17 <= ap_enable_reg_pp1_iter16;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter18 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter18 <= ap_enable_reg_pp1_iter17;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter19 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter19 <= ap_enable_reg_pp1_iter18;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter20 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter20 <= ap_enable_reg_pp1_iter19;
        end else if ((1'b1 == ap_CS_fsm_state6)) begin
            ap_enable_reg_pp1_iter20 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter3 <= ap_enable_reg_pp1_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter4 <= ap_enable_reg_pp1_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter5 <= ap_enable_reg_pp1_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter6 <= ap_enable_reg_pp1_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter7 <= ap_enable_reg_pp1_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter8 <= ap_enable_reg_pp1_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter9 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter9 <= ap_enable_reg_pp1_iter8;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        X_1_reg_259 <= 9'd0;
    end else if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln74_fu_339_p2 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
        X_1_reg_259 <= add_ln76_fu_387_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln68_fu_276_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        X_reg_225 <= add_ln69_fu_314_p2;
    end else if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        X_reg_225 <= 9'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        Y_1_reg_247 <= 9'd0;
    end else if (((icmp_ln74_reg_833 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        Y_1_reg_247 <= select_ln74_reg_857;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln68_reg_794 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        Y_reg_214 <= select_ln68_1_reg_803;
    end else if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        Y_reg_214 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        indvar_flatten7_reg_236 <= 17'd0;
    end else if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln74_fu_339_p2 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
        indvar_flatten7_reg_236 <= add_ln74_fu_327_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln68_fu_276_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        indvar_flatten_reg_203 <= add_ln68_fu_270_p2;
    end else if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten_reg_203 <= 12'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (icmp_ln74_reg_833_pp1_iter13_reg == 1'd0))) begin
        X_1_cast_i_reg_932[8 : 0] <= X_1_cast_i_fu_553_p1[8 : 0];
        add_ln84_1_reg_946 <= add_ln84_1_fu_562_p2;
        add_ln84_reg_941 <= add_ln84_fu_556_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        Y_2_reg_828 <= Y_2_fu_333_p2;
        icmp_ln74_reg_833 <= icmp_ln74_fu_339_p2;
        icmp_ln74_reg_833_pp1_iter1_reg <= icmp_ln74_reg_833;
        icmp_ln76_reg_837_pp1_iter1_reg <= icmp_ln76_reg_837;
        select_ln65_reg_847_pp1_iter1_reg <= select_ln65_reg_847;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp1_stage0_11001)) begin
        add_ln84_1_reg_946_pp1_iter15_reg <= add_ln84_1_reg_946;
        add_ln84_reg_941_pp1_iter15_reg <= add_ln84_reg_941;
        icmp_ln74_reg_833_pp1_iter10_reg <= icmp_ln74_reg_833_pp1_iter9_reg;
        icmp_ln74_reg_833_pp1_iter11_reg <= icmp_ln74_reg_833_pp1_iter10_reg;
        icmp_ln74_reg_833_pp1_iter12_reg <= icmp_ln74_reg_833_pp1_iter11_reg;
        icmp_ln74_reg_833_pp1_iter13_reg <= icmp_ln74_reg_833_pp1_iter12_reg;
        icmp_ln74_reg_833_pp1_iter14_reg <= icmp_ln74_reg_833_pp1_iter13_reg;
        icmp_ln74_reg_833_pp1_iter15_reg <= icmp_ln74_reg_833_pp1_iter14_reg;
        icmp_ln74_reg_833_pp1_iter16_reg <= icmp_ln74_reg_833_pp1_iter15_reg;
        icmp_ln74_reg_833_pp1_iter17_reg <= icmp_ln74_reg_833_pp1_iter16_reg;
        icmp_ln74_reg_833_pp1_iter18_reg <= icmp_ln74_reg_833_pp1_iter17_reg;
        icmp_ln74_reg_833_pp1_iter19_reg <= icmp_ln74_reg_833_pp1_iter18_reg;
        icmp_ln74_reg_833_pp1_iter2_reg <= icmp_ln74_reg_833_pp1_iter1_reg;
        icmp_ln74_reg_833_pp1_iter3_reg <= icmp_ln74_reg_833_pp1_iter2_reg;
        icmp_ln74_reg_833_pp1_iter4_reg <= icmp_ln74_reg_833_pp1_iter3_reg;
        icmp_ln74_reg_833_pp1_iter5_reg <= icmp_ln74_reg_833_pp1_iter4_reg;
        icmp_ln74_reg_833_pp1_iter6_reg <= icmp_ln74_reg_833_pp1_iter5_reg;
        icmp_ln74_reg_833_pp1_iter7_reg <= icmp_ln74_reg_833_pp1_iter6_reg;
        icmp_ln74_reg_833_pp1_iter8_reg <= icmp_ln74_reg_833_pp1_iter7_reg;
        icmp_ln74_reg_833_pp1_iter9_reg <= icmp_ln74_reg_833_pp1_iter8_reg;
        icmp_ln76_reg_837_pp1_iter10_reg <= icmp_ln76_reg_837_pp1_iter9_reg;
        icmp_ln76_reg_837_pp1_iter11_reg <= icmp_ln76_reg_837_pp1_iter10_reg;
        icmp_ln76_reg_837_pp1_iter12_reg <= icmp_ln76_reg_837_pp1_iter11_reg;
        icmp_ln76_reg_837_pp1_iter13_reg <= icmp_ln76_reg_837_pp1_iter12_reg;
        icmp_ln76_reg_837_pp1_iter2_reg <= icmp_ln76_reg_837_pp1_iter1_reg;
        icmp_ln76_reg_837_pp1_iter3_reg <= icmp_ln76_reg_837_pp1_iter2_reg;
        icmp_ln76_reg_837_pp1_iter4_reg <= icmp_ln76_reg_837_pp1_iter3_reg;
        icmp_ln76_reg_837_pp1_iter5_reg <= icmp_ln76_reg_837_pp1_iter4_reg;
        icmp_ln76_reg_837_pp1_iter6_reg <= icmp_ln76_reg_837_pp1_iter5_reg;
        icmp_ln76_reg_837_pp1_iter7_reg <= icmp_ln76_reg_837_pp1_iter6_reg;
        icmp_ln76_reg_837_pp1_iter8_reg <= icmp_ln76_reg_837_pp1_iter7_reg;
        icmp_ln76_reg_837_pp1_iter9_reg <= icmp_ln76_reg_837_pp1_iter8_reg;
        rem15_1_urem_i_reg_902 <= grp_fu_399_p2;
        select_ln65_reg_847_pp1_iter10_reg <= select_ln65_reg_847_pp1_iter9_reg;
        select_ln65_reg_847_pp1_iter11_reg <= select_ln65_reg_847_pp1_iter10_reg;
        select_ln65_reg_847_pp1_iter12_reg <= select_ln65_reg_847_pp1_iter11_reg;
        select_ln65_reg_847_pp1_iter13_reg <= select_ln65_reg_847_pp1_iter12_reg;
        select_ln65_reg_847_pp1_iter2_reg <= select_ln65_reg_847_pp1_iter1_reg;
        select_ln65_reg_847_pp1_iter3_reg <= select_ln65_reg_847_pp1_iter2_reg;
        select_ln65_reg_847_pp1_iter4_reg <= select_ln65_reg_847_pp1_iter3_reg;
        select_ln65_reg_847_pp1_iter5_reg <= select_ln65_reg_847_pp1_iter4_reg;
        select_ln65_reg_847_pp1_iter6_reg <= select_ln65_reg_847_pp1_iter5_reg;
        select_ln65_reg_847_pp1_iter7_reg <= select_ln65_reg_847_pp1_iter6_reg;
        select_ln65_reg_847_pp1_iter8_reg <= select_ln65_reg_847_pp1_iter7_reg;
        select_ln65_reg_847_pp1_iter9_reg <= select_ln65_reg_847_pp1_iter8_reg;
        tmp2_i_reg_997_pp1_iter18_reg <= tmp2_i_reg_997;
        tmp2_i_reg_997_pp1_iter19_reg <= tmp2_i_reg_997_pp1_iter18_reg;
        tmp41_i_reg_1003_pp1_iter18_reg <= tmp41_i_reg_1003;
        tmp_1_reg_951_pp1_iter16_reg <= tmp_1_reg_951;
        tmp_i_reg_991_pp1_iter18_reg <= tmp_i_reg_991;
        tmp_i_reg_991_pp1_iter19_reg <= tmp_i_reg_991_pp1_iter18_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln68_reg_794 <= icmp_ln68_fu_276_p2;
        icmp_ln68_reg_794_pp0_iter1_reg <= icmp_ln68_reg_794;
        select_ln68_reg_798_pp0_iter1_reg <= select_ln68_reg_798;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        icmp_ln68_reg_794_pp0_iter2_reg <= icmp_ln68_reg_794_pp0_iter1_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln74_fu_339_p2 == 1'd0))) begin
        icmp_ln76_reg_837 <= icmp_ln76_fu_345_p2;
        select_ln65_reg_847 <= select_ln65_fu_351_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (icmp_ln76_reg_837_pp1_iter12_reg == 1'd1) & (icmp_ln74_reg_833_pp1_iter12_reg == 1'd0))) begin
        rem15_1_urem_i_mid1_reg_907 <= grp_fu_410_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (icmp_ln76_reg_837_pp1_iter12_reg == 1'd0))) begin
        rem15_urem_i_reg_897 <= grp_fu_393_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln68_fu_276_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        select_ln68_1_reg_803 <= select_ln68_1_fu_302_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln68_fu_276_p2 == 1'd0))) begin
        select_ln68_reg_798 <= select_ln68_fu_288_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln74_fu_339_p2 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
        select_ln74_reg_857 <= select_ln74_fu_379_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (icmp_ln74_reg_833_pp1_iter16_reg == 1'd0))) begin
        tmp2_i_reg_997 <= tmp2_i_fu_622_p2;
        tmp41_i_reg_1003 <= tmp41_i_fu_635_p2;
        tmp_i_reg_991 <= tmp_i_fu_616_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln74_reg_833_pp1_iter14_reg == 1'd0) & (ap_enable_reg_pp1_iter15 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        tmp_1_reg_951 <= TempStream_dout;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter15 == 1'b1) & (1'b0 == ap_block_pp1_stage0))) begin
        Input_tmp_address0 = zext_ln78_fu_568_p1;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        Input_tmp_address0 = zext_ln70_fu_323_p1;
    end else begin
        Input_tmp_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp1_iter15 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1)))) begin
        Input_tmp_ce0 = 1'b1;
    end else begin
        Input_tmp_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter16 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        Input_tmp_ce1 = 1'b1;
    end else begin
        Input_tmp_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter16 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        Input_tmp_ce2 = 1'b1;
    end else begin
        Input_tmp_ce2 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter16 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        Input_tmp_ce3 = 1'b1;
    end else begin
        Input_tmp_ce3 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter16 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        Input_tmp_ce4 = 1'b1;
    end else begin
        Input_tmp_ce4 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter16 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        Input_tmp_ce5 = 1'b1;
    end else begin
        Input_tmp_ce5 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter16 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        Input_tmp_ce6 = 1'b1;
    end else begin
        Input_tmp_ce6 = 1'b0;
    end
end

always @ (*) begin
    if ((((icmp_ln74_reg_833_pp1_iter14_reg == 1'd0) & (ap_enable_reg_pp1_iter15 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001)) | ((icmp_ln68_reg_794_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1)))) begin
        Input_tmp_we0 = 1'b1;
    end else begin
        Input_tmp_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((((icmp_ln74_reg_833_pp1_iter14_reg == 1'd0) & (ap_enable_reg_pp1_iter15 == 1'b1) & (1'b0 == ap_block_pp1_stage0)) | ((icmp_ln68_reg_794_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter3 == 1'b1)))) begin
        TempStream_blk_n = TempStream_empty_n;
    end else begin
        TempStream_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((((icmp_ln74_reg_833_pp1_iter14_reg == 1'd0) & (ap_enable_reg_pp1_iter15 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001)) | ((icmp_ln68_reg_794_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1)))) begin
        TempStream_read = 1'b1;
    end else begin
        TempStream_read = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln68_fu_276_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter14 == 1'b1) & (ap_enable_reg_pp1_iter13 == 1'b0))) begin
        ap_condition_pp1_exit_iter14_state21 = 1'b1;
    end else begin
        ap_condition_pp1_exit_iter14_state21 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_subdone) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln74_fu_339_p2 == 1'd1))) begin
        ap_condition_pp1_flush_enable = 1'b1;
    end else begin
        ap_condition_pp1_flush_enable = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state28)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter20 == 1'b0) & (ap_enable_reg_pp1_iter19 == 1'b0) & (ap_enable_reg_pp1_iter18 == 1'b0) & (ap_enable_reg_pp1_iter17 == 1'b0) & (ap_enable_reg_pp1_iter16 == 1'b0) & (ap_enable_reg_pp1_iter14 == 1'b0) & (ap_enable_reg_pp1_iter15 == 1'b0) & (ap_enable_reg_pp1_iter13 == 1'b0) & (ap_enable_reg_pp1_iter12 == 1'b0) & (ap_enable_reg_pp1_iter11 == 1'b0) & (ap_enable_reg_pp1_iter10 == 1'b0) & (ap_enable_reg_pp1_iter9 == 1'b0) & (ap_enable_reg_pp1_iter8 == 1'b0) & (ap_enable_reg_pp1_iter7 == 1'b0) & (ap_enable_reg_pp1_iter6 == 1'b0) & (ap_enable_reg_pp1_iter5 == 1'b0) & (ap_enable_reg_pp1_iter4 == 1'b0) & (ap_enable_reg_pp1_iter3 == 1'b0) & (ap_enable_reg_pp1_iter2 == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b0))) begin
        ap_idle_pp1 = 1'b1;
    end else begin
        ap_idle_pp1 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln74_reg_833 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b0 == ap_block_pp1_stage0) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        ap_phi_mux_Y_1_phi_fu_251_p4 = select_ln74_reg_857;
    end else begin
        ap_phi_mux_Y_1_phi_fu_251_p4 = Y_1_reg_247;
    end
end

always @ (*) begin
    if (((icmp_ln68_reg_794 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_Y_phi_fu_218_p4 = select_ln68_1_reg_803;
    end else begin
        ap_phi_mux_Y_phi_fu_218_p4 = Y_reg_214;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state28)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        grp_fu_373_ce = 1'b1;
    end else begin
        grp_fu_373_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        grp_fu_393_ce = 1'b1;
    end else begin
        grp_fu_393_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        grp_fu_399_ce = 1'b1;
    end else begin
        grp_fu_399_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        grp_fu_410_ce = 1'b1;
    end else begin
        grp_fu_410_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        grp_fu_429_ce = 1'b1;
    end else begin
        grp_fu_429_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        grp_fu_448_ce = 1'b1;
    end else begin
        grp_fu_448_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        grp_fu_467_ce = 1'b1;
    end else begin
        grp_fu_467_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        grp_fu_486_ce = 1'b1;
    end else begin
        grp_fu_486_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_730_ce = 1'b1;
    end else begin
        grp_fu_730_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        grp_fu_739_ce = 1'b1;
    end else begin
        grp_fu_739_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        grp_fu_748_ce = 1'b1;
    end else begin
        grp_fu_748_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        grp_fu_756_ce = 1'b1;
    end else begin
        grp_fu_756_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        grp_fu_764_ce = 1'b1;
    end else begin
        grp_fu_764_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        grp_fu_772_ce = 1'b1;
    end else begin
        grp_fu_772_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        grp_fu_780_ce = 1'b1;
    end else begin
        grp_fu_780_ce = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln74_reg_833_pp1_iter19_reg == 1'd0) & (ap_enable_reg_pp1_iter20 == 1'b1) & (1'b0 == ap_block_pp1_stage0))) begin
        outStream_blk_n = outStream_full_n;
    end else begin
        outStream_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln74_reg_833_pp1_iter19_reg == 1'd0) & (ap_enable_reg_pp1_iter20 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        outStream_write = 1'b1;
    end else begin
        outStream_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln68_fu_276_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1)) & ~((ap_enable_reg_pp0_iter2 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter3 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((ap_enable_reg_pp0_iter2 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter3 == 1'b1)) | ((ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln68_fu_276_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_pp1_stage0;
        end
        ap_ST_fsm_pp1_stage0 : begin
            if ((~((ap_enable_reg_pp1_iter14 == 1'b1) & (ap_enable_reg_pp1_iter15 == 1'b0) & (ap_enable_reg_pp1_iter13 == 1'b0) & (1'b0 == ap_block_pp1_stage0_subdone)) & ~((ap_enable_reg_pp1_iter20 == 1'b1) & (ap_enable_reg_pp1_iter19 == 1'b0) & (1'b0 == ap_block_pp1_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else if ((((ap_enable_reg_pp1_iter20 == 1'b1) & (ap_enable_reg_pp1_iter19 == 1'b0) & (1'b0 == ap_block_pp1_stage0_subdone)) | ((ap_enable_reg_pp1_iter14 == 1'b1) & (ap_enable_reg_pp1_iter15 == 1'b0) & (ap_enable_reg_pp1_iter13 == 1'b0) & (1'b0 == ap_block_pp1_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_state28;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign Input_tmp_address1 = zext_ln84_9_fu_592_p1;

assign Input_tmp_address2 = zext_ln84_8_fu_588_p1;

assign Input_tmp_address3 = zext_ln84_6_fu_584_p1;

assign Input_tmp_address4 = zext_ln84_4_fu_580_p1;

assign Input_tmp_address5 = zext_ln84_2_fu_576_p1;

assign Input_tmp_address6 = zext_ln84_1_fu_572_p1;

assign Input_tmp_load_cast_i_fu_631_p1 = Input_tmp_q6;

assign Sum_fu_713_p2 = (add_ln84_7_fu_707_p2 + tmp1_i_fu_674_p2);

assign X_1_cast_i_fu_553_p1 = select_ln65_reg_847_pp1_iter13_reg;

assign Y_2_fu_333_p2 = (ap_phi_mux_Y_1_phi_fu_251_p4 + 9'd1);

assign add_ln68_1_fu_296_p2 = (ap_phi_mux_Y_phi_fu_218_p4 + 3'd1);

assign add_ln68_fu_270_p2 = (indvar_flatten_reg_203 + 12'd1);

assign add_ln69_fu_314_p2 = (select_ln68_fu_288_p3 + 9'd1);

assign add_ln74_fu_327_p2 = (indvar_flatten7_reg_236 + 17'd1);

assign add_ln76_fu_387_p2 = (select_ln65_fu_351_p3 + 9'd1);

assign add_ln84_1_fu_562_p2 = (select_ln65_3_fu_546_p3 + X_1_cast_i_fu_553_p1);

assign add_ln84_7_fu_707_p2 = ($signed(zext_ln84_11_fu_704_p1) + $signed(tmp3_cast_i_fu_700_p1));

assign add_ln84_fu_556_p2 = (select_ln65_2_fu_530_p3 + X_1_cast_i_fu_553_p1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp1_stage0 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state28 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((icmp_ln68_reg_794_pp0_iter2_reg == 1'd0) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == TempStream_empty_n));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((icmp_ln68_reg_794_pp0_iter2_reg == 1'd0) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == TempStream_empty_n));
end

assign ap_block_pp1_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp1_stage0_01001 = (((icmp_ln74_reg_833_pp1_iter19_reg == 1'd0) & (ap_enable_reg_pp1_iter20 == 1'b1) & (outStream_full_n == 1'b0)) | ((icmp_ln74_reg_833_pp1_iter14_reg == 1'd0) & (ap_enable_reg_pp1_iter15 == 1'b1) & (1'b0 == TempStream_empty_n)));
end

always @ (*) begin
    ap_block_pp1_stage0_11001 = (((icmp_ln74_reg_833_pp1_iter19_reg == 1'd0) & (ap_enable_reg_pp1_iter20 == 1'b1) & (outStream_full_n == 1'b0)) | ((icmp_ln74_reg_833_pp1_iter14_reg == 1'd0) & (ap_enable_reg_pp1_iter15 == 1'b1) & (1'b0 == TempStream_empty_n)));
end

always @ (*) begin
    ap_block_pp1_stage0_subdone = (((icmp_ln74_reg_833_pp1_iter19_reg == 1'd0) & (ap_enable_reg_pp1_iter20 == 1'b1) & (outStream_full_n == 1'b0)) | ((icmp_ln74_reg_833_pp1_iter14_reg == 1'd0) & (ap_enable_reg_pp1_iter15 == 1'b1) & (1'b0 == TempStream_empty_n)));
end

always @ (*) begin
    ap_block_state1 = ((ap_done_reg == 1'b1) | (ap_start == 1'b0));
end

assign ap_block_state10_pp1_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp1_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp1_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp1_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp1_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state15_pp1_stage0_iter8 = ~(1'b1 == 1'b1);

assign ap_block_state16_pp1_stage0_iter9 = ~(1'b1 == 1'b1);

assign ap_block_state17_pp1_stage0_iter10 = ~(1'b1 == 1'b1);

assign ap_block_state18_pp1_stage0_iter11 = ~(1'b1 == 1'b1);

assign ap_block_state19_pp1_stage0_iter12 = ~(1'b1 == 1'b1);

assign ap_block_state20_pp1_stage0_iter13 = ~(1'b1 == 1'b1);

assign ap_block_state21_pp1_stage0_iter14 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state22_pp1_stage0_iter15 = ((icmp_ln74_reg_833_pp1_iter14_reg == 1'd0) & (1'b0 == TempStream_empty_n));
end

assign ap_block_state23_pp1_stage0_iter16 = ~(1'b1 == 1'b1);

assign ap_block_state24_pp1_stage0_iter17 = ~(1'b1 == 1'b1);

assign ap_block_state25_pp1_stage0_iter18 = ~(1'b1 == 1'b1);

assign ap_block_state26_pp1_stage0_iter19 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state27_pp1_stage0_iter20 = ((icmp_ln74_reg_833_pp1_iter19_reg == 1'd0) & (outStream_full_n == 1'b0));
end

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state5_pp0_stage0_iter3 = ((icmp_ln68_reg_794_pp0_iter2_reg == 1'd0) & (1'b0 == TempStream_empty_n));
end

assign ap_block_state7_pp1_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp1_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp1_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_pp1 = (ap_idle_pp1 ^ 1'b1);

assign grp_fu_373_p0 = (ap_phi_mux_Y_1_phi_fu_251_p4 + select_ln65_1_fu_359_p3);

assign grp_fu_373_p1 = 9'd7;

assign grp_fu_393_p1 = 9'd7;

assign grp_fu_399_p1 = 9'd7;

assign grp_fu_410_p0 = (Y_1_reg_247 + 9'd2);

assign grp_fu_410_p1 = 9'd7;

assign grp_fu_429_p0 = (Y_1_reg_247 + select_ln65_4_fu_416_p3);

assign grp_fu_429_p1 = 9'd7;

assign grp_fu_448_p0 = (Y_1_reg_247 + select_ln65_5_fu_435_p3);

assign grp_fu_448_p1 = 9'd7;

assign grp_fu_467_p0 = (Y_1_reg_247 + select_ln65_6_fu_454_p3);

assign grp_fu_467_p1 = 9'd7;

assign grp_fu_486_p0 = (Y_1_reg_247 + select_ln65_7_fu_473_p3);

assign grp_fu_486_p1 = 9'd7;

assign grp_fu_730_p0 = grp_fu_730_p00;

assign grp_fu_730_p00 = select_ln68_1_fu_302_p3;

assign grp_fu_730_p1 = 12'd474;

assign grp_fu_730_p2 = grp_fu_730_p20;

assign grp_fu_730_p20 = select_ln68_reg_798_pp0_iter1_reg;

assign grp_fu_739_p0 = grp_fu_739_p00;

assign grp_fu_739_p00 = grp_fu_373_p2;

assign grp_fu_739_p1 = 12'd474;

assign grp_fu_739_p2 = X_1_cast_i_fu_553_p1;

assign grp_fu_748_p0 = grp_fu_748_p00;

assign grp_fu_748_p00 = grp_fu_429_p2;

assign grp_fu_748_p1 = 12'd474;

assign grp_fu_748_p2 = X_1_cast_i_reg_932;

assign grp_fu_756_p0 = grp_fu_756_p00;

assign grp_fu_756_p00 = grp_fu_448_p2;

assign grp_fu_756_p1 = 12'd474;

assign grp_fu_756_p2 = X_1_cast_i_reg_932;

assign grp_fu_764_p0 = grp_fu_764_p00;

assign grp_fu_764_p00 = grp_fu_467_p2;

assign grp_fu_764_p1 = 12'd474;

assign grp_fu_764_p2 = X_1_cast_i_reg_932;

assign grp_fu_772_p0 = grp_fu_772_p00;

assign grp_fu_772_p00 = grp_fu_486_p2;

assign grp_fu_772_p1 = 12'd474;

assign grp_fu_772_p2 = X_1_cast_i_reg_932;

assign grp_fu_780_p0 = grp_fu_780_p00;

assign grp_fu_780_p00 = Input_tmp_q3;

assign grp_fu_780_p1 = 15'd98;

assign grp_fu_780_p2 = grp_fu_780_p20;

assign grp_fu_780_p20 = tmp5_i_fu_641_p3;

assign icmp_ln68_fu_276_p2 = ((indvar_flatten_reg_203 == 12'd2844) ? 1'b1 : 1'b0);

assign icmp_ln69_fu_282_p2 = ((X_reg_225 == 9'd474) ? 1'b1 : 1'b0);

assign icmp_ln74_fu_339_p2 = ((indvar_flatten7_reg_236 == 17'd125136) ? 1'b1 : 1'b0);

assign icmp_ln76_fu_345_p2 = ((X_1_reg_259 == 9'd474) ? 1'b1 : 1'b0);

assign mul16_1_i_fu_524_p0 = mul16_1_i_fu_524_p00;

assign mul16_1_i_fu_524_p00 = rem15_1_urem_i_reg_902;

assign mul16_1_i_fu_524_p1 = 12'd474;

assign mul16_1_i_mid1_fu_540_p0 = mul16_1_i_mid1_fu_540_p00;

assign mul16_1_i_mid1_fu_540_p00 = rem15_1_urem_i_mid1_reg_907;

assign mul16_1_i_mid1_fu_540_p1 = 12'd474;

assign mul_ln84_fu_515_p0 = mul_ln84_fu_515_p00;

assign mul_ln84_fu_515_p00 = rem15_urem_i_reg_897;

assign mul_ln84_fu_515_p1 = 12'd474;

assign outStream_din = {{Sum_fu_713_p2[15:8]}};

assign p_shl3_cast_i_fu_659_p1 = p_shl3_i_fu_652_p3;

assign p_shl3_i_fu_652_p3 = {{tmp_i_reg_991_pp1_iter19_reg}, {6'd0}};

assign p_shl4_cast_i_fu_670_p1 = p_shl4_i_fu_663_p3;

assign p_shl4_i_fu_663_p3 = {{tmp_i_reg_991_pp1_iter19_reg}, {1'd0}};

assign p_shl_cast_i_fu_690_p1 = p_shl_i_fu_683_p3;

assign p_shl_i_fu_683_p3 = {{tmp2_i_reg_997_pp1_iter19_reg}, {4'd0}};

assign select_ln65_1_fu_359_p3 = ((icmp_ln76_fu_345_p2[0:0] == 1'b1) ? 9'd7 : 9'd6);

assign select_ln65_2_fu_530_p3 = ((icmp_ln76_reg_837_pp1_iter13_reg[0:0] == 1'b1) ? mul16_1_i_fu_524_p2 : mul_ln84_fu_515_p2);

assign select_ln65_3_fu_546_p3 = ((icmp_ln76_reg_837_pp1_iter13_reg[0:0] == 1'b1) ? mul16_1_i_mid1_fu_540_p2 : mul16_1_i_fu_524_p2);

assign select_ln65_4_fu_416_p3 = ((icmp_ln76_reg_837[0:0] == 1'b1) ? 9'd3 : 9'd2);

assign select_ln65_5_fu_435_p3 = ((icmp_ln76_reg_837[0:0] == 1'b1) ? 9'd4 : 9'd3);

assign select_ln65_6_fu_454_p3 = ((icmp_ln76_reg_837[0:0] == 1'b1) ? 9'd5 : 9'd4);

assign select_ln65_7_fu_473_p3 = ((icmp_ln76_reg_837[0:0] == 1'b1) ? 9'd6 : 9'd5);

assign select_ln65_fu_351_p3 = ((icmp_ln76_fu_345_p2[0:0] == 1'b1) ? 9'd0 : X_1_reg_259);

assign select_ln68_1_fu_302_p3 = ((icmp_ln69_fu_282_p2[0:0] == 1'b1) ? add_ln68_1_fu_296_p2 : ap_phi_mux_Y_phi_fu_218_p4);

assign select_ln68_fu_288_p3 = ((icmp_ln69_fu_282_p2[0:0] == 1'b1) ? 9'd0 : X_reg_225);

assign select_ln74_fu_379_p3 = ((icmp_ln76_fu_345_p2[0:0] == 1'b1) ? Y_2_fu_333_p2 : ap_phi_mux_Y_1_phi_fu_251_p4);

assign tmp1_i_fu_674_p2 = (p_shl3_cast_i_fu_659_p1 - p_shl4_cast_i_fu_670_p1);

assign tmp2_cast6_i_fu_680_p1 = tmp2_i_reg_997_pp1_iter19_reg;

assign tmp2_i_fu_622_p2 = (zext_ln79_1_fu_612_p1 + zext_ln84_3_fu_596_p1);

assign tmp3_cast_i_fu_700_p1 = $signed(tmp3_i_fu_694_p2);

assign tmp3_i_fu_694_p2 = (p_shl_cast_i_fu_690_p1 - tmp2_cast6_i_fu_680_p1);

assign tmp41_i_fu_635_p2 = (Input_tmp_load_cast_i_fu_631_p1 + tmp_2_cast_i_fu_628_p1);

assign tmp5_i_fu_641_p3 = {{tmp41_i_reg_1003_pp1_iter18_reg}, {1'd0}};

assign tmp_2_cast_i_fu_628_p1 = tmp_1_reg_951_pp1_iter16_reg;

assign tmp_i_fu_616_p2 = (zext_ln79_fu_608_p1 + zext_ln84_5_fu_600_p1);

assign zext_ln70_fu_323_p1 = grp_fu_730_p3;

assign zext_ln78_fu_568_p1 = grp_fu_739_p3;

assign zext_ln79_1_fu_612_p1 = Input_tmp_q1;

assign zext_ln79_fu_608_p1 = Input_tmp_q2;

assign zext_ln84_11_fu_704_p1 = grp_fu_780_p3;

assign zext_ln84_1_fu_572_p1 = add_ln84_reg_941_pp1_iter15_reg;

assign zext_ln84_2_fu_576_p1 = add_ln84_1_reg_946_pp1_iter15_reg;

assign zext_ln84_3_fu_596_p1 = Input_tmp_q5;

assign zext_ln84_4_fu_580_p1 = grp_fu_748_p3;

assign zext_ln84_5_fu_600_p1 = Input_tmp_q4;

assign zext_ln84_6_fu_584_p1 = grp_fu_756_p3;

assign zext_ln84_8_fu_588_p1 = grp_fu_764_p3;

assign zext_ln84_9_fu_592_p1 = grp_fu_772_p3;

always @ (posedge ap_clk) begin
    X_1_cast_i_reg_932[11:9] <= 3'b000;
end

endmodule //Filter_HW_Filter_vertical_HW
