-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Version: 2020.2
-- Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity Filter_HW_Filter_horizontal_HW is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    start_full_n : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    start_out : OUT STD_LOGIC;
    start_write : OUT STD_LOGIC;
    inStream_dout : IN STD_LOGIC_VECTOR (7 downto 0);
    inStream_empty_n : IN STD_LOGIC;
    inStream_read : OUT STD_LOGIC;
    TempStream_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    TempStream_full_n : IN STD_LOGIC;
    TempStream_write : OUT STD_LOGIC );
end;


architecture behav of Filter_HW_Filter_horizontal_HW is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (8 downto 0) := "000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (8 downto 0) := "000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (8 downto 0) := "000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (8 downto 0) := "000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (8 downto 0) := "000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (8 downto 0) := "001000000";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (8 downto 0) := "010000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (8 downto 0) := "100000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv9_10E : STD_LOGIC_VECTOR (8 downto 0) := "100001110";
    constant ap_const_lv9_1DA : STD_LOGIC_VECTOR (8 downto 0) := "111011010";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv15_62 : STD_LOGIC_VECTOR (14 downto 0) := "000000001100010";

attribute shreg_extract : string;
    signal real_start : STD_LOGIC;
    signal start_once_reg : STD_LOGIC := '0';
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal internal_ap_ready : STD_LOGIC;
    signal inStream_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal icmp_ln31_fu_169_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal icmp_ln40_reg_374 : STD_LOGIC_VECTOR (0 downto 0);
    signal TempStream_blk_n : STD_LOGIC;
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal icmp_ln40_reg_374_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal X_reg_88 : STD_LOGIC_VECTOR (8 downto 0);
    signal input_buffer_4_1_reg_99 : STD_LOGIC_VECTOR (7 downto 0);
    signal input_buffer_4_1_reg_99_pp0_iter2_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_state8_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state12_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal input_buffer_3_1_reg_109 : STD_LOGIC_VECTOR (7 downto 0);
    signal input_buffer_3_1_reg_109_pp0_iter2_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal input_buffer_2_1_reg_120 : STD_LOGIC_VECTOR (7 downto 0);
    signal input_buffer_2_1_reg_120_pp0_iter2_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal input_buffer_2_1_reg_120_pp0_iter3_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal input_buffer_1_1_reg_131 : STD_LOGIC_VECTOR (7 downto 0);
    signal input_buffer_0_1_reg_142 : STD_LOGIC_VECTOR (7 downto 0);
    signal input_buffer_0_0_i_reg_153 : STD_LOGIC_VECTOR (7 downto 0);
    signal Y_3_fu_163_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal Y_3_reg_331 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_block_state2 : BOOLEAN;
    signal tmp_reg_339 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_2_reg_344 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_3_reg_349 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_4_reg_354 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_5_reg_359 : STD_LOGIC_VECTOR (7 downto 0);
    signal X_2_fu_175_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal icmp_ln40_fu_181_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln40_reg_374_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln40_reg_374_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_7_reg_378 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_7_reg_378_pp0_iter2_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_i_fu_207_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_i_reg_389 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp2_i_fu_213_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp2_i_reg_395 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_flush_enable : STD_LOGIC;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_condition_pp0_exit_iter3_state11 : STD_LOGIC;
    signal Y_reg_77 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal ap_phi_mux_input_buffer_2_1_phi_fu_123_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_phi_mux_input_buffer_1_1_phi_fu_134_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_phi_mux_input_buffer_0_1_phi_fu_145_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_phi_mux_input_buffer_0_0_i_phi_fu_156_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal zext_ln43_fu_199_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln48_1_fu_195_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln43_1_fu_203_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln48_fu_191_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal input_buffer_0_0_cast_i_fu_222_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_16_cast_i_fu_219_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp41_i_fu_226_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp5_i_fu_232_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_shl3_i_fu_244_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal p_shl4_i_fu_255_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_shl3_cast_i_fu_251_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_shl4_cast_i_fu_262_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_shl_i_fu_275_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal p_shl_cast_i_fu_282_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp2_cast13_i_fu_272_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp3_i_fu_286_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_fu_322_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal zext_ln48_4_fu_296_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp3_cast_i_fu_292_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln48_1_fu_299_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp1_i_fu_266_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal Sum_fu_305_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_322_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_322_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_322_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_322_ce : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal grp_fu_322_p00 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_fu_322_p20 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component Filter_HW_mac_muladd_8ns_8ns_10ns_15_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (14 downto 0) );
    end component;



begin
    mac_muladd_8ns_8ns_10ns_15_4_1_U10 : component Filter_HW_mac_muladd_8ns_8ns_10ns_15_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 10,
        dout_WIDTH => 15)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_322_p0,
        din1 => grp_fu_322_p1,
        din2 => grp_fu_322_p2,
        ce => grp_fu_322_ce,
        dout => grp_fu_322_p3);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((not(((icmp_ln31_fu_169_p2 = ap_const_lv1_0) and (inStream_empty_n = ap_const_logic_0))) and (icmp_ln31_fu_169_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_pp0_flush_enable)) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((inStream_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                elsif ((((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter3_state11) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) or ((inStream_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state7)))) then 
                    ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp0_exit_iter3_state11) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter2;
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                elsif (((inStream_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
                    ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    start_once_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                start_once_reg <= ap_const_logic_0;
            else
                if (((internal_ap_ready = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
                    start_once_reg <= ap_const_logic_1;
                elsif ((internal_ap_ready = ap_const_logic_1)) then 
                    start_once_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    X_reg_88_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln40_fu_181_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                X_reg_88 <= X_2_fu_175_p2;
            elsif (((inStream_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
                X_reg_88 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;

    Y_reg_77_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
                Y_reg_77 <= Y_3_reg_331;
            elsif ((not(((ap_done_reg = ap_const_logic_1) or (real_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                Y_reg_77 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;

    input_buffer_0_0_i_reg_153_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln40_reg_374_pp0_iter3_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                input_buffer_0_0_i_reg_153 <= input_buffer_0_1_reg_142;
            elsif (((inStream_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
                input_buffer_0_0_i_reg_153 <= tmp_reg_339;
            end if; 
        end if;
    end process;

    input_buffer_0_1_reg_142_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln40_reg_374_pp0_iter3_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                input_buffer_0_1_reg_142 <= input_buffer_1_1_reg_131;
            elsif (((inStream_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
                input_buffer_0_1_reg_142 <= tmp_2_reg_344;
            end if; 
        end if;
    end process;

    input_buffer_1_1_reg_131_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln40_reg_374_pp0_iter3_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                input_buffer_1_1_reg_131 <= input_buffer_2_1_reg_120_pp0_iter3_reg;
            elsif (((inStream_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
                input_buffer_1_1_reg_131 <= tmp_3_reg_349;
            end if; 
        end if;
    end process;

    input_buffer_2_1_reg_120_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (icmp_ln40_reg_374_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                input_buffer_2_1_reg_120 <= input_buffer_3_1_reg_109;
            elsif (((inStream_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
                input_buffer_2_1_reg_120 <= tmp_4_reg_354;
            end if; 
        end if;
    end process;

    input_buffer_3_1_reg_109_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (icmp_ln40_reg_374_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                input_buffer_3_1_reg_109 <= input_buffer_4_1_reg_99;
            elsif (((inStream_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
                input_buffer_3_1_reg_109 <= tmp_5_reg_359;
            end if; 
        end if;
    end process;

    input_buffer_4_1_reg_99_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (icmp_ln40_reg_374_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                input_buffer_4_1_reg_99 <= tmp_7_reg_378;
            elsif (((inStream_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
                input_buffer_4_1_reg_99 <= inStream_dout;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((icmp_ln31_fu_169_p2 = ap_const_lv1_0) and (inStream_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                Y_3_reg_331 <= Y_3_fu_163_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                icmp_ln40_reg_374 <= icmp_ln40_fu_181_p2;
                icmp_ln40_reg_374_pp0_iter1_reg <= icmp_ln40_reg_374;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                icmp_ln40_reg_374_pp0_iter2_reg <= icmp_ln40_reg_374_pp0_iter1_reg;
                icmp_ln40_reg_374_pp0_iter3_reg <= icmp_ln40_reg_374_pp0_iter2_reg;
                input_buffer_2_1_reg_120_pp0_iter2_reg <= input_buffer_2_1_reg_120;
                input_buffer_2_1_reg_120_pp0_iter3_reg <= input_buffer_2_1_reg_120_pp0_iter2_reg;
                input_buffer_3_1_reg_109_pp0_iter2_reg <= input_buffer_3_1_reg_109;
                input_buffer_4_1_reg_99_pp0_iter2_reg <= input_buffer_4_1_reg_99;
                tmp_7_reg_378_pp0_iter2_reg <= tmp_7_reg_378;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln40_reg_374_pp0_iter2_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                tmp2_i_reg_395 <= tmp2_i_fu_213_p2;
                tmp_i_reg_389 <= tmp_i_fu_207_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                tmp_2_reg_344 <= inStream_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                tmp_3_reg_349 <= inStream_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                tmp_4_reg_354 <= inStream_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                tmp_5_reg_359 <= inStream_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln40_reg_374 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                tmp_7_reg_378 <= inStream_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln31_fu_169_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                tmp_reg_339 <= inStream_dout;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (real_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, inStream_empty_n, ap_CS_fsm_state2, icmp_ln31_fu_169_p2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_done_reg = ap_const_logic_1) or (real_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if ((not(((icmp_ln31_fu_169_p2 = ap_const_lv1_0) and (inStream_empty_n = ap_const_logic_0))) and (icmp_ln31_fu_169_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                elsif ((not(((icmp_ln31_fu_169_p2 = ap_const_lv1_0) and (inStream_empty_n = ap_const_logic_0))) and (icmp_ln31_fu_169_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                if (((inStream_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                if (((inStream_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state5 => 
                if (((inStream_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state6 => 
                if (((inStream_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state7 => 
                if (((inStream_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if (not(((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_state13;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXX";
        end case;
    end process;
    Sum_fu_305_p2 <= std_logic_vector(unsigned(add_ln48_1_fu_299_p2) + unsigned(tmp1_i_fu_266_p2));

    TempStream_blk_n_assign_proc : process(TempStream_full_n, ap_block_pp0_stage0, ap_enable_reg_pp0_iter4, icmp_ln40_reg_374_pp0_iter3_reg)
    begin
        if (((icmp_ln40_reg_374_pp0_iter3_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            TempStream_blk_n <= TempStream_full_n;
        else 
            TempStream_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    TempStream_din <= Sum_fu_305_p2(15 downto 8);

    TempStream_write_assign_proc : process(ap_enable_reg_pp0_iter4, icmp_ln40_reg_374_pp0_iter3_reg, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln40_reg_374_pp0_iter3_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            TempStream_write <= ap_const_logic_1;
        else 
            TempStream_write <= ap_const_logic_0;
        end if; 
    end process;

    X_2_fu_175_p2 <= std_logic_vector(unsigned(X_reg_88) + unsigned(ap_const_lv9_1));
    Y_3_fu_163_p2 <= std_logic_vector(unsigned(Y_reg_77) + unsigned(ap_const_lv9_1));
    add_ln48_1_fu_299_p2 <= std_logic_vector(unsigned(zext_ln48_4_fu_296_p1) + unsigned(tmp3_cast_i_fu_292_p1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(7);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state13 <= ap_CS_fsm(8);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(inStream_empty_n, TempStream_full_n, ap_enable_reg_pp0_iter1, icmp_ln40_reg_374, ap_enable_reg_pp0_iter4, icmp_ln40_reg_374_pp0_iter3_reg)
    begin
                ap_block_pp0_stage0_01001 <= (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (inStream_empty_n = ap_const_logic_0) and (icmp_ln40_reg_374 = ap_const_lv1_0)) or ((ap_const_logic_0 = TempStream_full_n) and (icmp_ln40_reg_374_pp0_iter3_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(inStream_empty_n, TempStream_full_n, ap_enable_reg_pp0_iter1, icmp_ln40_reg_374, ap_enable_reg_pp0_iter4, icmp_ln40_reg_374_pp0_iter3_reg)
    begin
                ap_block_pp0_stage0_11001 <= (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (inStream_empty_n = ap_const_logic_0) and (icmp_ln40_reg_374 = ap_const_lv1_0)) or ((ap_const_logic_0 = TempStream_full_n) and (icmp_ln40_reg_374_pp0_iter3_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(inStream_empty_n, TempStream_full_n, ap_enable_reg_pp0_iter1, icmp_ln40_reg_374, ap_enable_reg_pp0_iter4, icmp_ln40_reg_374_pp0_iter3_reg)
    begin
                ap_block_pp0_stage0_subdone <= (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (inStream_empty_n = ap_const_logic_0) and (icmp_ln40_reg_374 = ap_const_lv1_0)) or ((ap_const_logic_0 = TempStream_full_n) and (icmp_ln40_reg_374_pp0_iter3_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1)));
    end process;


    ap_block_state1_assign_proc : process(real_start, ap_done_reg)
    begin
                ap_block_state1 <= ((ap_done_reg = ap_const_logic_1) or (real_start = ap_const_logic_0));
    end process;

        ap_block_state10_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state12_pp0_stage0_iter4_assign_proc : process(TempStream_full_n, icmp_ln40_reg_374_pp0_iter3_reg)
    begin
                ap_block_state12_pp0_stage0_iter4 <= ((ap_const_logic_0 = TempStream_full_n) and (icmp_ln40_reg_374_pp0_iter3_reg = ap_const_lv1_0));
    end process;


    ap_block_state2_assign_proc : process(inStream_empty_n, icmp_ln31_fu_169_p2)
    begin
                ap_block_state2 <= ((icmp_ln31_fu_169_p2 = ap_const_lv1_0) and (inStream_empty_n = ap_const_logic_0));
    end process;

        ap_block_state8_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state9_pp0_stage0_iter1_assign_proc : process(inStream_empty_n, icmp_ln40_reg_374)
    begin
                ap_block_state9_pp0_stage0_iter1 <= ((inStream_empty_n = ap_const_logic_0) and (icmp_ln40_reg_374 = ap_const_lv1_0));
    end process;


    ap_condition_pp0_exit_iter3_state11_assign_proc : process(ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3)
    begin
        if (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0))) then 
            ap_condition_pp0_exit_iter3_state11 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter3_state11 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp0_flush_enable_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln40_fu_181_p2, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln40_fu_181_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_condition_pp0_flush_enable <= ap_const_logic_1;
        else 
            ap_condition_pp0_flush_enable <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_done_reg, inStream_empty_n, ap_CS_fsm_state2, icmp_ln31_fu_169_p2)
    begin
        if ((not(((icmp_ln31_fu_169_p2 = ap_const_lv1_0) and (inStream_empty_n = ap_const_logic_0))) and (icmp_ln31_fu_169_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(real_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (real_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_input_buffer_0_0_i_phi_fu_156_p4_assign_proc : process(ap_block_pp0_stage0, ap_enable_reg_pp0_iter4, icmp_ln40_reg_374_pp0_iter3_reg, input_buffer_0_1_reg_142, input_buffer_0_0_i_reg_153)
    begin
        if (((icmp_ln40_reg_374_pp0_iter3_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_phi_mux_input_buffer_0_0_i_phi_fu_156_p4 <= input_buffer_0_1_reg_142;
        else 
            ap_phi_mux_input_buffer_0_0_i_phi_fu_156_p4 <= input_buffer_0_0_i_reg_153;
        end if; 
    end process;


    ap_phi_mux_input_buffer_0_1_phi_fu_145_p4_assign_proc : process(ap_block_pp0_stage0, ap_enable_reg_pp0_iter4, icmp_ln40_reg_374_pp0_iter3_reg, input_buffer_1_1_reg_131, input_buffer_0_1_reg_142)
    begin
        if (((icmp_ln40_reg_374_pp0_iter3_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_phi_mux_input_buffer_0_1_phi_fu_145_p4 <= input_buffer_1_1_reg_131;
        else 
            ap_phi_mux_input_buffer_0_1_phi_fu_145_p4 <= input_buffer_0_1_reg_142;
        end if; 
    end process;


    ap_phi_mux_input_buffer_1_1_phi_fu_134_p4_assign_proc : process(ap_block_pp0_stage0, ap_enable_reg_pp0_iter4, icmp_ln40_reg_374_pp0_iter3_reg, input_buffer_2_1_reg_120_pp0_iter3_reg, input_buffer_1_1_reg_131)
    begin
        if (((icmp_ln40_reg_374_pp0_iter3_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_phi_mux_input_buffer_1_1_phi_fu_134_p4 <= input_buffer_2_1_reg_120_pp0_iter3_reg;
        else 
            ap_phi_mux_input_buffer_1_1_phi_fu_134_p4 <= input_buffer_1_1_reg_131;
        end if; 
    end process;


    ap_phi_mux_input_buffer_2_1_phi_fu_123_p4_assign_proc : process(ap_block_pp0_stage0, input_buffer_3_1_reg_109, input_buffer_2_1_reg_120, icmp_ln40_reg_374_pp0_iter1_reg, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (icmp_ln40_reg_374_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_phi_mux_input_buffer_2_1_phi_fu_123_p4 <= input_buffer_3_1_reg_109;
        else 
            ap_phi_mux_input_buffer_2_1_phi_fu_123_p4 <= input_buffer_2_1_reg_120;
        end if; 
    end process;

    ap_ready <= internal_ap_ready;

    grp_fu_322_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_322_ce <= ap_const_logic_1;
        else 
            grp_fu_322_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_322_p0 <= grp_fu_322_p00(8 - 1 downto 0);
    grp_fu_322_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_input_buffer_2_1_phi_fu_123_p4),15));
    grp_fu_322_p1 <= ap_const_lv15_62(8 - 1 downto 0);
    grp_fu_322_p2 <= grp_fu_322_p20(10 - 1 downto 0);
    grp_fu_322_p20 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp5_i_fu_232_p3),15));
    icmp_ln31_fu_169_p2 <= "1" when (Y_reg_77 = ap_const_lv9_10E) else "0";
    icmp_ln40_fu_181_p2 <= "1" when (X_reg_88 = ap_const_lv9_1DA) else "0";

    inStream_blk_n_assign_proc : process(inStream_empty_n, ap_CS_fsm_state2, icmp_ln31_fu_169_p2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, icmp_ln40_reg_374)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln40_reg_374 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0)) or ((icmp_ln31_fu_169_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            inStream_blk_n <= inStream_empty_n;
        else 
            inStream_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    inStream_read_assign_proc : process(inStream_empty_n, ap_CS_fsm_state2, icmp_ln31_fu_169_p2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln40_reg_374, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln40_reg_374 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((inStream_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state7)) or ((inStream_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state6)) or ((inStream_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5)) or ((inStream_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4)) or ((inStream_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3)) or (not(((icmp_ln31_fu_169_p2 = ap_const_lv1_0) and (inStream_empty_n = ap_const_logic_0))) and (icmp_ln31_fu_169_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            inStream_read <= ap_const_logic_1;
        else 
            inStream_read <= ap_const_logic_0;
        end if; 
    end process;

    input_buffer_0_0_cast_i_fu_222_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_input_buffer_0_0_i_phi_fu_156_p4),9));

    internal_ap_ready_assign_proc : process(inStream_empty_n, ap_CS_fsm_state2, icmp_ln31_fu_169_p2)
    begin
        if ((not(((icmp_ln31_fu_169_p2 = ap_const_lv1_0) and (inStream_empty_n = ap_const_logic_0))) and (icmp_ln31_fu_169_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            internal_ap_ready <= ap_const_logic_1;
        else 
            internal_ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    p_shl3_cast_i_fu_251_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl3_i_fu_244_p3),16));
    p_shl3_i_fu_244_p3 <= (tmp_i_reg_389 & ap_const_lv6_0);
    p_shl4_cast_i_fu_262_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl4_i_fu_255_p3),16));
    p_shl4_i_fu_255_p3 <= (tmp_i_reg_389 & ap_const_lv1_0);
    p_shl_cast_i_fu_282_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl_i_fu_275_p3),14));
    p_shl_i_fu_275_p3 <= (tmp2_i_reg_395 & ap_const_lv4_0);

    real_start_assign_proc : process(ap_start, start_full_n, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (start_full_n = ap_const_logic_0))) then 
            real_start <= ap_const_logic_0;
        else 
            real_start <= ap_start;
        end if; 
    end process;

    start_out <= real_start;

    start_write_assign_proc : process(real_start, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
            start_write <= ap_const_logic_1;
        else 
            start_write <= ap_const_logic_0;
        end if; 
    end process;

    tmp1_i_fu_266_p2 <= std_logic_vector(unsigned(p_shl3_cast_i_fu_251_p1) - unsigned(p_shl4_cast_i_fu_262_p1));
    tmp2_cast13_i_fu_272_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp2_i_reg_395),14));
    tmp2_i_fu_213_p2 <= std_logic_vector(unsigned(zext_ln43_1_fu_203_p1) + unsigned(zext_ln48_fu_191_p1));
        tmp3_cast_i_fu_292_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp3_i_fu_286_p2),16));

    tmp3_i_fu_286_p2 <= std_logic_vector(unsigned(p_shl_cast_i_fu_282_p1) - unsigned(tmp2_cast13_i_fu_272_p1));
    tmp41_i_fu_226_p2 <= std_logic_vector(unsigned(input_buffer_0_0_cast_i_fu_222_p1) + unsigned(tmp_16_cast_i_fu_219_p1));
    tmp5_i_fu_232_p3 <= (tmp41_i_fu_226_p2 & ap_const_lv1_0);
    tmp_16_cast_i_fu_219_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_7_reg_378_pp0_iter2_reg),9));
    tmp_i_fu_207_p2 <= std_logic_vector(unsigned(zext_ln43_fu_199_p1) + unsigned(zext_ln48_1_fu_195_p1));
    zext_ln43_1_fu_203_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(input_buffer_4_1_reg_99_pp0_iter2_reg),9));
    zext_ln43_fu_199_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(input_buffer_3_1_reg_109_pp0_iter2_reg),9));
    zext_ln48_1_fu_195_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_input_buffer_1_1_phi_fu_134_p4),9));
    zext_ln48_4_fu_296_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_322_p3),16));
    zext_ln48_fu_191_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_input_buffer_0_1_phi_fu_145_p4),9));
end behav;
